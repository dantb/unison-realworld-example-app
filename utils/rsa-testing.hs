{-# LANGUAGE OverloadedStrings #-}
#!/usr/bin/env stack
-- stack --resolver lts-18.6 --package either script
import  Web.JWT
import Data.ByteString.Base64 as B64
import qualified Data.ByteString as B
import Data.ByteString.Char8 as C8 (pack, unpack)
import Crypto.PubKey.RSA.PKCS15
import Crypto.PubKey.RSA.Types
import Crypto.Hash
import Data.Either.Combinators
import Control.Arrow (left)
import Data.Bifunctor (bimap)

main :: IO ()
main = do
  putStrLn $ "Private key parsed: " ++ show (readRsaSecret $ C8.pack privateKey)
  putStrLn $ "Signature created and base64 encoded: " ++ show (B64.encode `fmap` (parseKeyAndSign "Hi it's Dan"))

parseKeyAndSign :: String -> Either String B.ByteString
parseKeyAndSign msg = do
  key <- maybeToRight "Invalid private key" $ readRsaSecret $ C8.pack privateKey
  show `left` (doSign key msg)

doSign :: PrivateKey -> String -> Either Error B.ByteString
doSign key message = sign Nothing (Just SHA256) key $ C8.pack message

privateKey = unlines [ "-----BEGIN RSA PRIVATE KEY-----"
  , "MIIEowIBAAKCAQEAze0oOgGY22Wqq2xXEdSOhdqUeY0KJec79Bb3zc4xjUNmRYhZ"
  , "zboIN8+aLeRYOkTU5uFRYdKpuy5+32Z/fQ2fnVjarZhAl5RDbXsYqIOd2EqL7CtJ"
  , "TGYZr0SvcodpOTakuNEze4lIv33JRvEX7NadbSBruKEImd+JydeORS+sCAAce/4Y"
  , "kDTVjaef59cFervnGCXaR0foDznHO44HQK1rNHf5r0xBa9vni7bJ9qgTS3+Fri1l"
  , "rb/Ci9nyVjCA7PBTMVoYTUbL/oJNDG1xjWefuRBT7DLUQ22QxT7hvOUGPeefdwRW"
  , "GiDHnYst0VR+81o6Uat2Cjonhvb8NiKVQGzoHwIDAQABAoIBAECDsDqcDXuO2m1i"
  , "P9UCNrSQyjtaiHdfflT2bSQ5GSUcnInkMd5WDgUOMUt3Yny+28SJiqmPCkXuRylO"
  , "P1q6TetJzxjbvkC+3nEKQ6tnsKf2kuemmAwrYJiceCr1aW3XRLvyLqLhW71CdzCW"
  , "j9xPUHrD0XvCV6N9ePmXYqciTE8kydqBCQw7r7T+oSJdWOZu3A+Vac1eQjYHn+1t"
  , "SzYpBaYkpYox8mbZt5ZpERsq1u3NrRVCU3ncrLiCLbGkCKPBnac+IQ70uTAh0mjg"
  , "Jsj4q+X9JEZ4b58y63OxE6X2dtH1Z0r83neSzuzp8kMwj/HxRQ0vClL16C1Mcv+n"
  , "mLectQECgYEA7GMD1EQ8yhOzQif3O+1T5RN2aFc/QwDbqjWZjpVS2Vl5hnkfoKR8"
  , "fie1V3xs1KTm9lGADBf0TCZnEiHgySsA3xGfbvXQ4Za7guWqiT/PWJFYZ0KwXxbO"
  , "+JKNy9AvRskiMpbLFFIsV2c5aYe40wCRHz5pNcN4zp5hB0JZhNMbxuECgYEA3wMl"
  , "nMGcbZ5iAt4qjoFKQJQz13H0AJ66Z5IiP0Wb9MPGMmQDrLBHpD1Ye3OmGON72Mn1"
  , "AkEoZO0ErZXK06OvGXGGMOJJLWytLETA0SXaP+PtddGZUtDrqmtKmqZP8lJbFGVI"
  , "plH9CQcUFWrWof4Ks6g6ufFE+U+qjQPP8SqRjv8CgYEA0WoKe2MUY4U+Wk5jpZBj"
  , "sV4jmN4qKia5c7nWVs2MvwaYNXxae4scyvpMmbueAmgwQGkFQjF6eHfQ+exPYogZ"
  , "VoUbNEbLDP7nEVh7UunXu8PPiHM5IpRnOSlEOxost8354M1cDZ2asLe+0fGt2Cf5"
  , "aK92r22DObBvjunFunj3c6ECgYALOPtRkiSvF4NTJZ76oOL9sPeS5fcjeNlkkOQM"
  , "TxJ0FM4KhyHwNMbGKxgizkUTh48Z77/WpzTDL3JG0fzs/ZW4MBBSsXCBSrDEQ4l4"
  , "fPEoue2fOjb/Beh2IQQWGDx5s09GDXrEc+fJ5oNKOKAocsJTHCooZU3VRf8NLZ3v"
  , "QvckPQKBgDsInbWj7Q19d0C+A3eJYp39CbhPSjfFYxPF09ysAgQo2PDneCvm2Zl7"
  , "b9GeRwt/5FGOxfHcWx/rx7LOCeMxN9bzYjT13tSqQNr8ID5K9ndKgq88utanilyI"
  , "PT7MU1/4azLrRdQ23+ZLkVY+HiJlcX5fDz1R7eTF8XlfAC9cvXN0"
  , "-----END RSA PRIVATE KEY-----" ]

-- On this website, the signature for "Hi it's Dan", base64 encoded is below https://8gwifi.org/RSAFunctionality?rsasignverifyfunctions=rsasignverifyfunctions&keysize=2048 :
-- bCUY1PubgLbhPVEd7ZWdgjC/X+m3VZaLw1jHlEDwjryMsz3VgympRpkldz7SP/2gjjGARgYmUyAItykAkML490wdRqnPUk8SKc/CNwutpp+CS8IvP8jr5jVumxc3hZ8yYSN79ftYKLVYNoWdUwaZ39qU/1X329wU6zoj0beDGAZjT4dftp4Pb0WRRCKlZHxGTLeHLpYgy7VOUwm925CXpxZpm/wq80Pl4LwmOuD/lwp/5zgjAI//kRcLG1qN6aZ5sNiSJji6ZVr2NZax8ljokLZfhxBb9QJyrN26U6dsTvljIab6mBkletfh1nhSDc6CViiVQkM1v/v0bK6oh+lhjw==

-- Check whether Haskell code produces the same. Then use as basis for tests in Unison.
-- bCUY1PubgLbhPVEd7ZWdgjC/X+m3VZaLw1jHlEDwjryMsz3VgympRpkldz7SP/2gjjGARgYmUyAItykAkML490wdRqnPUk8SKc/CNwutpp+CS8IvP8jr5jVumxc3hZ8yYSN79ftYKLVYNoWdUwaZ39qU/1X329wU6zoj0beDGAZjT4dftp4Pb0WRRCKlZHxGTLeHLpYgy7VOUwm925CXpxZpm/wq80Pl4LwmOuD/lwp/5zgjAI//kRcLG1qN6aZ5sNiSJji6ZVr2NZax8ljokLZfhxBb9QJyrN26U6dsTvljIab6mBkletfh1nhSDc6CViiVQkM1v/v0bK6oh+lhjw==
--  YAY they're equal! 

-- PARSING OUTPUT: 

-- Just (PrivateKey {private_pub = PublicKey {public_size = 256, public_n = 25995799060019582862645614852685040023056697316737279550883082460077695508875694235238189010112287460427747529259005043044827772094037969227750514390175248942034715929614031392673554828189920550587829193529046986064269886147764883252430488042674919068735364858310115636603675166903997488197802785267082453437689050724683470063283148561164860481528873658075483042928499113618532220138188796742322306575876894748558690474494674896561593422472481454833001789791598182507431137948200801735887018104318514342438158015847853902254990097881823574767284479063859029712108263878574626837039411673163646799040911277114092480543, public_e = 65537}, private_d = 8144189485333812584278190398634805403869571529170542193550688146700569818396260952407197411471771459442795859907317874541044048653963220534723493010956836768205087011410886866264452564694683136925237789363846265741056034032468812776582736171814416868628019458791572611665878183726335908382704224897443229534095365149382991577508145998323384514004981233314062713802485049073987516541241539368880993371638115948985945125146910704571007406918729333034859431491699380098186187836376226768326263952479811431042758971285359808032254809819746896178564705029132983157416771749918855135313796693706110434865397320357007635713, private_p = 165996440041370676653200234132703969560263251219282445538808467120748007967405329666796648029759450458467259579927610426998447402188703266525304153208198655047585313471751896502121372999947156742290783465846522519781070582250759512604870713379474733382159693734172865542718463836277411091099952066420316817121, private_q = 156604557625095733057409641462331317426215360698801022361760456493794348954177838514335630171042088506500359120421677422735262110911444061135206765666221353219887311314916235561264263814011460768068215447082539947688711865564984170536922090567771773575827053966024983142993249906074947982937377280816646819583, private_dP = 147055667979339001110947287692611193199251172658808299213233452745220388400134062211034172878828813253095970580756170312664645280126858460887630404673921688716416004926323196957698167371163342437106681679716545630345746325509206197145523730840577437866164298922934256992915319466414852839436838992085343761313, private_dQ = 7880767063606294575939347201470446997446606643341101541863161046684067974592650127718371428415960570279966803166923907719012076258997856380730151108033599690544094980188195139860682394046260854373696912346891324709360692931219277574969392170720529002747724552236910362170861317885090535845819464914983920701, private_qinv = 41454843335020867380820213346030645557487577483969565166305809512713652950745031191368095600162969218940299683600665020232421739876852309970446530621326739683010100680554185685991050016825446679988931486278269744504232580679930988234482255249732314540912631429077740992892381986228883949731270390734091285364})
